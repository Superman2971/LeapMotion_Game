<div id="canvas_wrap">
  <!-- The canvas for the panning background -->
  <canvas id="background" width="600" height="360">
    Your browser does not support canvas. Please try again with a different browser.
  </canvas>
  <!-- The canvas for all enemy ships and bullets -->
  <canvas id="main" width="600" height="360">
  </canvas>
  <!-- The canvas the ship uses (can only move up
       one forth the screen.) -->
  <canvas id="ship" width="600" height="360">
  </canvas>
  <!-- The canvas for Leap Motion ship -->
  <canvas id="leap" width="600" height="360">
  </canvas>
  <!-- Overlays for the canvas -->
  <div class="highscore">HIGHSCORE: <%= @top_score %></div>
  <div class="score">
    <div class="name_font"><%= @name ? @name : "Playing as Guest" %></div>
    <div>SCORE: <span id="score"></span></div>
  </div>
  <div id="game-over">
    <div id="game_end">GAME OVER</div>
    <div><%= link_to "CLICK HERE TO START AS A NEW PLAYER", root_path %></div>
  </div>
  <div id="missing-hand">Place your hand over the Leap Motion device</div>
  <div id="wave">WAVE NUMBER: <span id="wave_number"></span></div>
  <div id="hidden_name"><%= @name %></div>
  <div id="hidden_score"><%= @top_score %></div>
<!--   <div id="sound_on" onclick="mute()"></div>
  <div id="sound_off" onclick="unmute()"></div> -->
</div>

<script>
//////// CANVAS SIZING ////////

// Get the canvas elements from DOM
var bgCanvas = document.getElementById('background');
var shipCanvas = document.getElementById('ship');
var mainCanvas = document.getElementById('main');
var canvasElement = document.getElementById("leap");
document.onload = OnResizeCalled();
// Resizing canvas to the screen size on resize
window.addEventListener("resize", OnResizeCalled, false); 
function OnResizeCalled() {
  bgCanvas.style.width = window.innerWidth + 'px'; 
  bgCanvas.style.height = window.innerHeight + 'px'; 
  shipCanvas.style.width = window.innerWidth + 'px'; 
  shipCanvas.style.height = window.innerHeight + 'px'; 
  mainCanvas.style.width = window.innerWidth + 'px'; 
  mainCanvas.style.height = window.innerHeight + 'px'; 
  canvasElement.style.width = window.innerWidth + 'px'; 
  canvasElement.style.height = window.innerHeight + 'px'; 

  // variables for the screen size and scale
  var gameWidth = window.innerWidth; 
  var gameHeight = window.innerHeight; 
  var scaleToFitX = gameWidth / 600;
  var scaleToFitY = gameHeight / 360; 
   
  var currentScreenRatio = gameWidth / gameHeight; 
  var optimalRatio = Math.min(scaleToFitX, scaleToFitY); 

  // Controlling the aspect ratio for bgCanvas
  if (currentScreenRatio >= 1.77 && currentScreenRatio <= 1.79) { 
    bgCanvas.style.width = gameWidth + "px"; 
    bgCanvas.style.height = gameHeight + "px"; 
  } 
  else { 
    bgCanvas.style.width = 600 * optimalRatio + "px"; 
    bgCanvas.style.height = 360 * optimalRatio + "px";
  }
  // Controlling the aspect ratio for shipCanvas
  if (currentScreenRatio >= 1.77 && currentScreenRatio <= 1.79) { 
    shipCanvas.style.width = gameWidth + "px"; 
    shipCanvas.style.height = gameHeight + "px"; 
  } 
  else { 
    shipCanvas.style.width = 600 * optimalRatio + "px"; 
    shipCanvas.style.height = 360 * optimalRatio + "px";
  }
  // Controlling the aspect ratio for mainCanvas
  if (currentScreenRatio >= 1.77 && currentScreenRatio <= 1.79) { 
    mainCanvas.style.width = gameWidth + "px"; 
    mainCanvas.style.height = gameHeight + "px"; 
  } 
  else { 
    mainCanvas.style.width = 600 * optimalRatio + "px"; 
    mainCanvas.style.height = 360 * optimalRatio + "px";
  }
  // Controlling the aspect ratio for canvasElement
  if (currentScreenRatio >= 1.77 && currentScreenRatio <= 1.79) { 
    canvasElement.style.width = gameWidth + "px"; 
    canvasElement.style.height = gameHeight + "px"; 
  } 
  else { 
    canvasElement.style.width = 600 * optimalRatio + "px"; 
    canvasElement.style.height = 360 * optimalRatio + "px";
  }
};

//////// LEAP MOTION ////////

var canvasElement = document.getElementById("leap");
var displayArea = canvasElement.getContext("2d");
var output = document.getElementById('testing_info');
var frameString = "", handString = "", fingerString = "";
var hand, finger;
var canvasX, canvasY, pointers, fire_control;

// Main Leap Loop
var controllerOptions = {enableGestures: true};
Leap.loop(controllerOptions, function(frame) {
  pointers = frame.pointables.length;
  // Find both hands, and set control for fire based on grabStrength
  for (var i = 0, len = frame.hands.length; i < len; i++) {
    hand = frame.hands[i];
    fire_control = hand.grabStrength;
  }
  // Canvas Display in 2D coordinates
  if(frame.pointables.length > 0){
    canvasElement.width = canvasElement.width; //clear
    //Get a pointable and normalize the tip position
    var pointable = frame.pointables[2];
    var interactionBox = frame.interactionBox;
    var normalizedPosition = interactionBox.normalizePoint(pointable.tipPosition, true);
    // Convert the normalized coordinates to span the canvas
    canvasX = canvasElement.width * normalizedPosition[0];
    canvasY = canvasElement.height * (1 - normalizedPosition[1]);
    // I am ignoring canvasZ (depth) for the 2D context
  };
  // Gesture Controls
  if(frame.valid && frame.gestures.length > 0){
    frame.gestures.forEach(function(gesture){
      switch (gesture.type){
        case "circle":
          //Only when Game Over use circle as a restart function
          if (game.ship.alive == false){
            game.restart();
          }
          break;
        case "keyTap":
          // Can insert keyTap function here if wanted
          break;
        case "screenTap":
          // Can insert screenTap function here if wanted
          break;
        case "swipe":
          // Can insert swipe function here if wanted
          break;
      }
    });
  }
});

/////// CANVAS GAME ////////

// Defines an object to hold all images for the game,
// so images are only ever created once.
// This type of object is known as a singleton.
var imageRepository = new function() {
  // Define images
  this.background = new Image();
  this.spaceship = new Image();
  this.bullet = new Image();
  this.enemy = new Image();
  this.enemyBullet = new Image();
  // Ensure all images have loaded before starting the game
  // 1) This can be used to help produce a loading screen, using the numLoaded/numImages = to our percentage loaded
// 2) This fixes bugs cause by games running prior to all assets loaded, referred to as the "race condition" (a race between image load and the game running)
  var numImages = 5;
  var numLoaded = 0;
  function imageLoaded() {
    numLoaded++;
    if (numLoaded === numImages) {
      window.init();
    }
  }
  this.background.onload = function() {
    imageLoaded();
  }
  this.spaceship.onload = function() {
    imageLoaded();
  }
  this.bullet.onload = function() {
    imageLoaded();
  }
  this.enemy.onload = function() {
    imageLoaded();
  }
  this.enemyBullet.onload = function() {
    imageLoaded();
  }
  // Set images src
  this.background.src = "assets/bg.png";
  this.spaceship.src = "assets/ship.png";
  this.bullet.src = "assets/bullet.png";
  this.enemy.src = "assets/enemy.png";
  this.enemyBullet.src = "assets/bullet_enemy.png";
}

// Creates the Drawable object which will be the base class for all drawable objects in the game.
// Sets up default variables that all child objects will inherit, as well as the default functions.
// This is referred to as an abstract object (refer to draw function which is empty).
function Drawable() {
  this.init = function(x, y, width, height) {
    // Default variables
    this.x = x;
    this.y = y;
    this.width = width;
    this.height = height;
  }
  this.speed = 0;
  this.canvasWidth = 0;
  this.canvasHeight = 0;
  this.collidableWith = "";
  this.isColliding = false;
  this.type = "";
  // Define abstract function to be implemented in child objects
  this.draw = function() {
  };
  this.move = function() {
  };
  this.isCollidableWith = function(object) {
    return (this.collidableWith === object.type);
  };
}

// Creates the Background object which will become a child of the Drawable object.
// The background is drawn on the "background" canvas and creates the illusion of moving by panning the image.
function Background() {
  this.speed = 1; // Redefine speed of the background for panning
  // Implement abstract function
  this.draw = function() {
    // Pan background
    this.y += this.speed;
    this.context.drawImage(imageRepository.background, this.x, this.y);
    // Draw another image at the top edge of the first image
    this.context.drawImage(imageRepository.background, this.x, this.y - this.canvasHeight);
    // If the image scrolled off the screen, reset
    if (this.y >= this.canvasHeight)
      this.y = 0;
  };
}
// Set Background to inherit properties from Drawable
Background.prototype = new Drawable();

// Creates the Game object which will hold all objects and data for the game.
function Game() {
  // Gets canvas information and context and sets up all game objects.
  // Returns true if the canvas is supported and false if it is not.
  // This is to stop the animation script from constantly running on browsers that do not support the canvas.
  this.init = function() {
    // Get the canvas elements
    this.bgCanvas = document.getElementById('background');
    this.shipCanvas = document.getElementById('ship');
    this.mainCanvas = document.getElementById('main');
    this.playerScore = 0;
    // Audio files
    this.laser = new SoundPool(10);
    this.laser.init("laser");
    this.explosion = new SoundPool(20);
    this.explosion.init("explosion");
    this.backgroundAudio = new Audio("assets/kick_shock.wav");
    this.backgroundAudio.loop = true;
    this.backgroundAudio.volume = .25;
    this.backgroundAudio.load();
    this.gameOverAudio = new Audio("assets/game_over.wav");
    this.gameOverAudio.loop = true;
    this.gameOverAudio.volume = .25;
    this.gameOverAudio.load();
    // Audio check function set at timed intervals - to ensure that the game sounds have fully loaded and avoid DOM exception errors
    this.checkAudio = window.setInterval(function(){checkReadyState()},1000);
    // Test to see if canvas is supported. Only need to
    // check one canvas
    if (this.bgCanvas.getContext) {
      this.bgContext = this.bgCanvas.getContext('2d');
      this.shipContext = this.shipCanvas.getContext('2d');
      this.mainContext = this.mainCanvas.getContext('2d');
      // Initialize objects to contain their context and canvas information
      Background.prototype.context = this.bgContext;
      Background.prototype.canvasWidth = this.bgCanvas.width;
      Background.prototype.canvasHeight = this.bgCanvas.height;
      Ship.prototype.context = this.shipContext;
      Ship.prototype.canvasWidth = this.shipCanvas.width;
      Ship.prototype.canvasHeight = this.shipCanvas.height;
      Bullet.prototype.context = this.mainContext;
      Bullet.prototype.canvasWidth = this.mainCanvas.width;
      Bullet.prototype.canvasHeight = this.mainCanvas.height;
      Enemy.prototype.context = this.mainContext;
      Enemy.prototype.canvasWidth = this.mainCanvas.width;
      Enemy.prototype.canvasHeight = this.mainCanvas.height;
      // Initialize the background object
      this.background = new Background();
      this.background.init(0,0); // Set draw point to 0,0
      // Initialize the ship object
      this.ship = new Ship();
      // Set the ship to start near the bottom middle of the canvas
      var shipStartX = this.shipCanvas.width/2 - imageRepository.spaceship.width;
      var shipStartY = this.shipCanvas.height/4*3 + imageRepository.spaceship.height*2;
      this.ship.init(shipStartX, shipStartY, imageRepository.spaceship.width,
                     imageRepository.spaceship.height);
      // Spawn a new wave of enemies using this function
      this.spawnWave = function() {
        // Added to show the wave number after each spawn
        if (game.playerScore > 0){
          document.getElementById('wave').style.display = "block";
        };
        document.getElementById('wave_number').innerHTML = (game.playerScore/180).toString();
        setTimeout(function(){
        document.getElementById('wave').style.display = "none";
        }, 2000);
        var height = imageRepository.enemy.height;
        var width = imageRepository.enemy.width;
        var x = 100;
        var y = -height;
        var spacer = y * 1.5;
        for (var i = 1; i <= 18; i++) {
          this.enemyPool.get(x,y,2);
          x += width + 25;
          if (i % 6 == 0) {
            x = 100;
            y += spacer
          }
        }
      }
      // Initialize the enemy pool object
      this.enemyPool = new Pool(30);
      this.enemyPool.init("enemy");
      this.spawnWave();
      this.enemyBulletPool = new Pool(50);
      this.enemyBulletPool.init("enemyBullet");
      // Start QuadTree
      this.quadTree = new QuadTree({x:0,y:0,width:this.mainCanvas.width,height:this.mainCanvas.height});
      return true;
    } else {
      return false;
    }
  };
  // Start the animation loop
  this.start = function() {
    // Create the ship
    this.ship.draw();
    // Play the BG Music
    this.backgroundAudio.play();
    // Begin animation loop!
    animate();
  };
  // Game over features added to game object
  this.gameOver = function() {
    this.backgroundAudio.pause();
    this.gameOverAudio.currentTime = 0;
    this.gameOverAudio.play();
    document.getElementById('game-over').style.display = "block"; // Make the object visible
    // Get top score for highscore comparison
    top_score = document.getElementById('hidden_score').innerHTML;
    if (top_score > game.playerScore){
      document.getElementById('game_end').innerHTML = "GAME OVER";
    } else {
      document.getElementById('game_end').innerHTML = "CONGRATULATIONS ON THE NEW HIGHSCORE!";
    }
    // Grab user name from hidden div
    name = document.getElementById("hidden_name").innerHTML;
    // AJAX post to send data of user and score to Rails Controller
    $.ajax({
      type: "POST",
      url: "/index",
      data: { initials: name, score: game.playerScore }
    });
  };
  // Restart the game and reset all of these Game object variables
  this.restart = function() {
    document.getElementById('game-over').style.display = "none"; // Hide the object
    this.gameOverAudio.pause();
    this.bgContext.clearRect(0, 0, this.bgCanvas.width, this.bgCanvas.height);
    this.shipContext.clearRect(0, 0, this.shipCanvas.width, this.shipCanvas.height);
    this.mainContext.clearRect(0, 0, this.mainCanvas.width, this.mainCanvas.height);
    this.quadTree.clear();
    this.background.init(0,0);
    this.ship.init(this.shipStartX, this.shipStartY, imageRepository.spaceship.width, imageRepository.spaceship.height);
    this.enemyPool.init("enemy");
    this.spawnWave();
    this.enemyBulletPool.init("enemyBullet");
    this.playerScore = 0;
    this.backgroundAudio.currentTime = 0;
    this.init(); // This is game.init(), therefore after elements are reset we initialize a new game
  };
}
// The animation loop.
// Calls the requestAnimationFrame shim to optimize the game loop and draws all game objects.
// This function must be a gobal function and cannot be within an object.
function animate() {
  // Update the player score
  document.getElementById('score').innerHTML = game.playerScore;
  // Insert objects into quadtree
  game.quadTree.clear();
  game.quadTree.insert(game.ship);
  game.quadTree.insert(game.ship.bulletPool.getPool());
  game.quadTree.insert(game.enemyPool.getPool());
  game.quadTree.insert(game.enemyBulletPool.getPool());
  detectCollision();
  // If there are no more enemies detected, let's bring out a new wave
  if (game.enemyPool.getPool().length === 0) {
    game.spawnWave();
  }
  // Animate game objects, but only if the player is still alive
  if (game.ship.alive) {
    requestAnimFrame( animate );
    game.background.draw();
    game.ship.move();
    game.ship.bulletPool.animate();
    game.enemyPool.animate();
    game.enemyBulletPool.animate();
  }
  else {
    game.gameOver();
  }
}

// requestAnim shim layer by Paul Irish
// Finds the first API that works to optimize the animation loop, otherwise defaults to setTimeout().
window.requestAnimFrame = (function(){
  return  window.requestAnimationFrame   ||
      window.webkitRequestAnimationFrame ||
      window.mozRequestAnimationFrame    ||
      window.oRequestAnimationFrame      ||
      window.msRequestAnimationFrame     ||
      function(/* function */ callback, /* DOMElement */ element){
        window.setTimeout(callback, 1000 / 60);
      };
})();

// Initializes the Game. game.start() was moved into the audio check (game will not start until they are loaded).
var game = new Game();
function init() {
  if(game.init());
};

// Custom Pool object. Holds Bullet objects to be managed to prevent garbage collection.
// An object pool is a data structure which reuses old objects so as not to continually create or delete new ones.
// When many objects are created or deleted in quick succession (such as our bullets), it can cause the game to lag as it tries to free up the memory used by those objects. That is why we are using an Object Pool.
function Pool(maxSize) {
  var size = maxSize; // Max bullets allowed in the pool
  var pool = [];
  // Populates the pool array with the given object.
  // Labelled as bullet, enemy, or enemy bullet.
  this.init = function(object) {
    if (object == "bullet") {
      for (var i = 0; i < size; i++) {
        // Initalize the object
        var bullet = new Bullet("bullet");
        bullet.init(0,0, imageRepository.bullet.width, imageRepository.bullet.height);
        bullet.collidableWith = "enemy";
        bullet.type = "bullet";
        pool[i] = bullet;
      }
    }
    else if (object == "enemy") {
      for (var i = 0; i < size; i++) {
        var enemy = new Enemy();
        enemy.init(0,0, imageRepository.enemy.width, imageRepository.enemy.height);
        pool[i] = enemy;
      }
    }
    else if (object == "enemyBullet") {
      for (var i = 0; i < size; i++) {
        var bullet = new Bullet("enemyBullet");
        bullet.init(0,0, imageRepository.enemyBullet.width, imageRepository.enemyBullet.height);
        bullet.collidableWith = "ship";
        bullet.type = "enemyBullet";
        pool[i] = bullet;
      }
    }
  };
  this.getPool = function() {
    var obj = [];
    for (var i = 0; i < size; i++) {
      if (pool[i].alive) {
        obj.push(pool[i]);
      }
    }
    return obj;
  };
  // Grabs the last item in the list and initializes it and pushes it to the front of the array.
  this.get = function(x, y, speed) {
    if(!pool[size - 1].alive) {
      pool[size - 1].spawn(x, y, speed);
      pool.unshift(pool.pop());
    }
  };
  // Used for the ship to be able to get two bullets at once.
  // If only the get() function is used twice, the ship is able to fire and only have 1 bullet spawn instead of 2.
  this.getTwo = function(x1, y1, speed1, x2, y2, speed2) {
    if(!pool[size - 1].alive &&
       !pool[size - 2].alive) {
        this.get(x1, y1, speed1);
        this.get(x2, y2, speed2);
       }
  };
  // Draws any in use Bullets.
  // If a bullet goes off the screen, clears it and pushes it to the front of the array.
  this.animate = function() {
    for (var i = 0; i < size; i++) {
      // Only draw until we find a bullet that is not alive
      if (pool[i].alive) {
        if (pool[i].draw()) {
          pool[i].clear();
          pool.push((pool.splice(i,1))[0]);
        }
      }
      else
        break;
    }
  };
}


// Creates the Bullet object which the ship fires.
// The bullets are drawn on the "main" canvas.
function Bullet(object) {
  this.alive = false; // Is true if the bullet is currently in use
  var self = object;
  // Sets the bullet values
  this.spawn = function(x, y, speed) {
    this.x = x;
    this.y = y;
    this.speed = speed;
    this.alive = true;
  };
  // Uses a "dirty rectangle" to erase the bullet and moves it.
  // Dirty rectangles are a great performance boost because they clear a section isntead of clearing the whole canvas.
  // indicating that the bullet is ready to be cleared by the pool,
  // otherwise draws the bullet.
  this.draw = function() {
    this.context.clearRect(this.x-1, this.y, this.width+2, this.height);
    this.y -= this.speed;
    if (this.isColliding) {
      return true;
    }
    else if (self === "bullet" && this.y <= 0 - this.height) {
      return true;
    }
    else if (self === "enemyBullet" && this.y >= this.canvasHeight) {
      return true;
    }
    else {
      if (self === "bullet") {
        this.context.drawImage(imageRepository.bullet, this.x, this.y);
      }
      else if (self === "enemyBullet") {
        this.context.drawImage(imageRepository.enemyBullet, this.x, this.y);
      }
      return false;
    }
  };
  // Resets the bullet values
  this.clear = function() {
    this.x = 0;
    this.y = 0;
    this.speed = 0;
    this.alive = false;
    this.isColliding = false;
  };
}
Bullet.prototype = new Drawable();

// Create the Ship object that the player controls.
// The ship is drawn on the "ship" canvas and uses dirty rectangles to move around the screen.
function Ship() {
  this.alive = true;
  this.speed = 3;
  this.bulletPool = new Pool(30);
  this.bulletPool.init("bullet");
  var fireRate = 9;
  var counter = 0;
  this.collidableWith = "enemyBullet";
  this.isColliding = false;
  this.type = "ship";
  this.draw = function() {
    this.context.drawImage(imageRepository.spaceship, canvasX, canvasY);
    this.x = canvasX;
    this.y = canvasY;
  };
  this.move = function() {
    counter++;
    if(pointers > 0){
      document.getElementById('missing-hand').style.display = "none"; // Make the object invisible
      // The ship is moving, so erase it's current image so it can
      // be redrawn in it's new location
      this.context.clearRect(this.x-1, this.y-1, this.width+2, this.height+2);
      // Finish by redrawing the ship
      this.draw();
    } else {
      if (game.ship.alive == true){ // Only if not a Game Over
      document.getElementById('missing-hand').style.display = "block"; // Make the object visible
      }
    }
    if (fire_control>0.5 && counter >= fireRate) {
      this.fire();
      counter = 0;
    }
  };
  // Fires two bullets
  this.fire = function() {
    this.bulletPool.getTwo(this.x+6, this.y, 3,
                           this.x+33, this.y, 3);
    game.laser.get();
  };
}
Ship.prototype = new Drawable();

// Create the Enemy ship object.
function Enemy() {
  var percentFire = .01;
  var chance = 0;
  this.alive = false;
  this.collidableWith = "bullet";
  this.type = "enemy";
  // Sets the Enemy values
  this.spawn = function(x, y, speed) {
    this.x = x;
    this.y = y;
    this.speed = speed;
    this.speedX = 0;
    this.speedY = speed;
    this.alive = true;
    this.leftEdge = this.x - 90;
    this.rightEdge = this.x + 90;
    this.bottomEdge = this.y + 140;
  };
  // Move the enemy
  this.draw = function() {
    this.context.clearRect(this.x-1, this.y, this.width+1, this.height);
    this.x += this.speedX;
    this.y += this.speedY;
    if (this.x <= this.leftEdge) {
      this.speedX = this.speed;
    }
    else if (this.x >= this.rightEdge + this.width) {
      this.speedX = -this.speed;
    }
    else if (this.y >= this.bottomEdge) {
      this.speed = 1.5;
      this.speedY = 0;
      this.y -= 5;
      this.speedX = -this.speed;
    }
    // Enemy will Move, Redraw, and (possibly) Shoot only if NOT colliding
    if (!this.isColliding) {
      this.context.drawImage(imageRepository.enemy, this.x, this.y);
      // Enemy has a chance to shoot every movement
      // Game is 60fps so this random chance happens 60 times a second
      chance = Math.floor(Math.random()*101);
      if (chance/100 < percentFire) {
        this.fire();
      }
      return false;
    }
    else {
      // Player gets points for killing enemy
      game.playerScore += 10;
      // Play the explosion sound upon death
      game.explosion.get();
      return true;
    }
  };
  // Fires a bullet
  this.fire = function() {
    game.enemyBulletPool.get(this.x+this.width/2, this.y+this.height, -2.5);
  }
  // Resets the enemy values
  this.clear = function() {
    this.x = 0;
    this.y = 0;
    this.speed = 0;
    this.speedX = 0;
    this.speedY = 0;
    this.alive = false;
    this.isColliding = false;
  };
}
Enemy.prototype = new Drawable();

// Bounding Box Test --> used for 2D Collision Detection
// if (object1.x < object2.x + object2.width  && object1.x + object1.width  > object2.x &&
//     object1.y < object2.y + object2.height && object1.y + object1.height > object2.y) {
// }
// While this may work for a small game, it is take a large quanitity of collision checks (over 100 objects on screen at any time checked against one another, could be in the thousands)

// Spatial Partitioning & Quadtree --> used to minimalize the Collision Detection Tests
// Spatial partitioning takes a confined space and subdivides it into multiple smaller spaces.
// QuadTree object = indexes are numbered as below:
//     |
//  1  |  0
//  -—-+—--
//  2  |  3
//     |
function QuadTree(boundBox, lvl) {
  var maxObjects = 10;
  this.bounds = boundBox || {
    x: 0,
    y: 0,
    width: 0,
    height: 0
  };
  var objects = [];
  this.nodes = [];
  var level = lvl || 0;
  var maxLevels = 5;
  // Clears the quadTree and all nodes of objects
  this.clear = function() {
    objects = [];
    for (var i = 0; i < this.nodes.length; i++) {
      this.nodes[i].clear();
    }
    this.nodes = [];
  };
  // Get all objects in the quadTree
  this.getAllObjects = function(returnedObjects) {
    for (var i = 0; i < this.nodes.length; i++) {
      this.nodes[i].getAllObjects(returnedObjects);
    }
    for (var i = 0, len = objects.length; i < len; i++) {
      returnedObjects.push(objects[i]);
    }
    return returnedObjects;
  };
  // Return all objects that the object could collide with
  this.findObjects = function(returnedObjects, obj) {
    if (typeof obj === "undefined") {
      console.log("UNDEFINED OBJECT");
      return;
    }
    var index = this.getIndex(obj);
    if (index != -1 && this.nodes.length) {
      this.nodes[index].findObjects(returnedObjects, obj);
    }
    for (var i = 0, len = objects.length; i < len; i++) {
      returnedObjects.push(objects[i]);
    }
    return returnedObjects;
  };
  // Insert the object into the quadTree.
  // If the tree excedes the capacity, it will split and add all objects to their corresponding nodes.
  this.insert = function(obj) {
    if (typeof obj === "undefined") {
      return;
    }
    if (obj instanceof Array) {
      for (var i = 0, len = obj.length; i < len; i++) {
        this.insert(obj[i]);
      }
      return;
    }
    if (this.nodes.length) {
      var index = this.getIndex(obj);
      // Only add the object to a subnode if it can fit completely
      // within one
      if (index != -1) {
        this.nodes[index].insert(obj);
        return;
      }
    }
    objects.push(obj);
    // Prevent infinite splitting
    if (objects.length > maxObjects && level < maxLevels) {
      if (this.nodes[0] == null) {
        this.split();
      }
      var i = 0;
      while (i < objects.length) {
        var index = this.getIndex(objects[i]);
        if (index != -1) {
          this.nodes[index].insert((objects.splice(i,1))[0]);
        }
        else {
          i++;
        }
      }
    }
  };
  // Determine which node the object belongs to.
  // -1 means object cannot completely fit within a node and is part of the current node
  this.getIndex = function(obj) {
    var index = -1;
    var verticalMidpoint = this.bounds.x + this.bounds.width / 2;
    var horizontalMidpoint = this.bounds.y + this.bounds.height / 2;
    // Object can fit completely within the top quadrant
    var topQuadrant = (obj.y < horizontalMidpoint && obj.y + obj.height < horizontalMidpoint);
    // Object can fit completely within the bottom quandrant
    var bottomQuadrant = (obj.y > horizontalMidpoint);
    // Object can fit completely within the left quadrants
    if (obj.x < verticalMidpoint &&
        obj.x + obj.width < verticalMidpoint) {
      if (topQuadrant) {
        index = 1;
      }
      else if (bottomQuadrant) {
        index = 2;
      }
    }
    // Object can fix completely within the right quandrants
    else if (obj.x > verticalMidpoint) {
      if (topQuadrant) {
        index = 0;
      }
      else if (bottomQuadrant) {
        index = 3;
      }
    }
    return index;
  };
  // Splits the node into 4 subnodes
  this.split = function() {
    // Bitwise or [html5rocks] to convert floating point coordinates to integers
    var subWidth = (this.bounds.width / 2) | 0;
    var subHeight = (this.bounds.height / 2) | 0;
    this.nodes[0] = new QuadTree({
      x: this.bounds.x + subWidth,
      y: this.bounds.y,
      width: subWidth,
      height: subHeight
    }, level+1);
    this.nodes[1] = new QuadTree({
      x: this.bounds.x,
      y: this.bounds.y,
      width: subWidth,
      height: subHeight
    }, level+1);
    this.nodes[2] = new QuadTree({
      x: this.bounds.x,
      y: this.bounds.y + subHeight,
      width: subWidth,
      height: subHeight
    }, level+1);
    this.nodes[3] = new QuadTree({
      x: this.bounds.x + subWidth,
      y: this.bounds.y + subHeight,
      width: subWidth,
      height: subHeight
    }, level+1);
  };
}

function detectCollision() {
  var objects = [];
  game.quadTree.getAllObjects(objects);
  for (var x = 0, len = objects.length; x < len; x++) {
    game.quadTree.findObjects(obj = [], objects[x]);
    for (y = 0, length = obj.length; y < length; y++) {
      // DETECT COLLISION ALGORITHM
      if ( objects[x].collidableWith === obj[y].type && (objects[x].x < obj[y].x + obj[y].width && objects[x].x + objects[x].width  > obj[y].x && objects[x].y < obj[y].y + obj[y].height && objects[x].y + objects[x].height > obj[y].y)) {
        objects[x].isColliding = true;
        obj[y].isColliding = true;
        // Fix for the ship death on Leap Motion
        // Detects if either the collided x or y object is the ship
        // If it is then the ship is dead!
        if ((objects[x].collidableWith == "enemyBullet") || (obj[y].collidableWith == "enemyBullet")){
          game.ship.alive = false;
        }
      }
      // This bit of craziness was added for DETECT COLLISION specifically of the ship and enemy ships
      if (objects[x].type === "ship" && obj[y].type === "enemy"){
        if (objects[x].x < obj[y].x + obj[y].width && objects[x].x + objects[x].width  > obj[y].x && objects[x].y < obj[y].y + obj[y].height && objects[x].y + objects[x].height > obj[y].y) {
        objects[x].isColliding = true;
        obj[y].isColliding = true;
        game.ship.alive = false;
        }
      }
    }
  }
};

// A sound pool to use for the sound effects
function SoundPool(maxSize) {
  var size = maxSize; // Max sounds allowed in the pool
  var pool = [];
  this.pool = pool;
  var currSound = 0;
  // Populates the pool array with the given sound
  this.init = function(object) {
    if (object == "laser") {
      for (var i = 0; i < size; i++) {
        // Initalize the sound
        laser = new Audio("assets/laser.wav");
        laser.volume = .12;
        laser.load();
        pool[i] = laser;
      }
    }
    else if (object == "explosion") {
      for (var i = 0; i < size; i++) {
        var explosion = new Audio("assets/explosion.wav");
        explosion.volume = .1;
        explosion.load();
        pool[i] = explosion;
      }
    }
  };
  // Plays a sound
  this.get = function() {
    if(pool[currSound].currentTime == 0 || pool[currSound].ended) {
      pool[currSound].play();
    }
    currSound = (currSound + 1) % size;
  };
}

// Ensure the game sound has loaded before starting the game
function checkReadyState() {
  if (game.gameOverAudio.readyState === 4 && game.backgroundAudio.readyState === 4) {
    window.clearInterval(game.checkAudio);
    game.start();
  }
}
// // Mute sound function
// function mute() {
//   document.getElementById("sound_off").style.display = "block";
//   document.getElementById("sound_on").style.display = "none";
// }
// // Unmute sound function
// function unmute() {
//   document.getElementById("sound_off").style.display = "none";
//   document.getElementById("sound_on").style.display = "block";
// }

</script>